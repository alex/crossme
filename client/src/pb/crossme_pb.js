/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var puzzle_pb = require('./puzzle_pb.js');
var fill_pb = require('./fill_pb.js');
var game_pb = require('./game_pb.js');
goog.exportSymbol('proto.crossme.GetGameByIdArgs', null, global);
goog.exportSymbol('proto.crossme.GetGameResponse', null, global);
goog.exportSymbol('proto.crossme.GetPuzzleByIdArgs', null, global);
goog.exportSymbol('proto.crossme.GetPuzzleIndexArgs', null, global);
goog.exportSymbol('proto.crossme.GetPuzzleIndexResponse', null, global);
goog.exportSymbol('proto.crossme.GetPuzzleResponse', null, global);
goog.exportSymbol('proto.crossme.NewGameArgs', null, global);
goog.exportSymbol('proto.crossme.NewGameResponse', null, global);
goog.exportSymbol('proto.crossme.SubscribeArgs', null, global);
goog.exportSymbol('proto.crossme.SubscribeEvent', null, global);
goog.exportSymbol('proto.crossme.UpdateFillArgs', null, global);
goog.exportSymbol('proto.crossme.UpdateFillResponse', null, global);
goog.exportSymbol('proto.crossme.UploadPuzzleArgs', null, global);
goog.exportSymbol('proto.crossme.UploadPuzzleResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.crossme.GetPuzzleIndexArgs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.crossme.GetPuzzleIndexArgs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.crossme.GetPuzzleIndexArgs.displayName = 'proto.crossme.GetPuzzleIndexArgs';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.crossme.GetPuzzleIndexArgs.prototype.toObject = function(opt_includeInstance) {
  return proto.crossme.GetPuzzleIndexArgs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.crossme.GetPuzzleIndexArgs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.crossme.GetPuzzleIndexArgs.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.crossme.GetPuzzleIndexArgs}
 */
proto.crossme.GetPuzzleIndexArgs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.crossme.GetPuzzleIndexArgs;
  return proto.crossme.GetPuzzleIndexArgs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.crossme.GetPuzzleIndexArgs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.crossme.GetPuzzleIndexArgs}
 */
proto.crossme.GetPuzzleIndexArgs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.crossme.GetPuzzleIndexArgs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.crossme.GetPuzzleIndexArgs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.crossme.GetPuzzleIndexArgs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.crossme.GetPuzzleIndexArgs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.crossme.GetPuzzleIndexResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.crossme.GetPuzzleIndexResponse.repeatedFields_, null);
};
goog.inherits(proto.crossme.GetPuzzleIndexResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.crossme.GetPuzzleIndexResponse.displayName = 'proto.crossme.GetPuzzleIndexResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.crossme.GetPuzzleIndexResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.crossme.GetPuzzleIndexResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.crossme.GetPuzzleIndexResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.crossme.GetPuzzleIndexResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.crossme.GetPuzzleIndexResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    puzzlesList: jspb.Message.toObjectList(msg.getPuzzlesList(),
    puzzle_pb.PuzzleIndex.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.crossme.GetPuzzleIndexResponse}
 */
proto.crossme.GetPuzzleIndexResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.crossme.GetPuzzleIndexResponse;
  return proto.crossme.GetPuzzleIndexResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.crossme.GetPuzzleIndexResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.crossme.GetPuzzleIndexResponse}
 */
proto.crossme.GetPuzzleIndexResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new puzzle_pb.PuzzleIndex;
      reader.readMessage(value,puzzle_pb.PuzzleIndex.deserializeBinaryFromReader);
      msg.addPuzzles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.crossme.GetPuzzleIndexResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.crossme.GetPuzzleIndexResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.crossme.GetPuzzleIndexResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.crossme.GetPuzzleIndexResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPuzzlesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      puzzle_pb.PuzzleIndex.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PuzzleIndex puzzles = 1;
 * @return {!Array<!proto.crossme.PuzzleIndex>}
 */
proto.crossme.GetPuzzleIndexResponse.prototype.getPuzzlesList = function() {
  return /** @type{!Array<!proto.crossme.PuzzleIndex>} */ (
    jspb.Message.getRepeatedWrapperField(this, puzzle_pb.PuzzleIndex, 1));
};


/** @param {!Array<!proto.crossme.PuzzleIndex>} value */
proto.crossme.GetPuzzleIndexResponse.prototype.setPuzzlesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.crossme.PuzzleIndex=} opt_value
 * @param {number=} opt_index
 * @return {!proto.crossme.PuzzleIndex}
 */
proto.crossme.GetPuzzleIndexResponse.prototype.addPuzzles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.crossme.PuzzleIndex, opt_index);
};


proto.crossme.GetPuzzleIndexResponse.prototype.clearPuzzlesList = function() {
  this.setPuzzlesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.crossme.GetPuzzleByIdArgs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.crossme.GetPuzzleByIdArgs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.crossme.GetPuzzleByIdArgs.displayName = 'proto.crossme.GetPuzzleByIdArgs';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.crossme.GetPuzzleByIdArgs.prototype.toObject = function(opt_includeInstance) {
  return proto.crossme.GetPuzzleByIdArgs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.crossme.GetPuzzleByIdArgs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.crossme.GetPuzzleByIdArgs.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.crossme.GetPuzzleByIdArgs}
 */
proto.crossme.GetPuzzleByIdArgs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.crossme.GetPuzzleByIdArgs;
  return proto.crossme.GetPuzzleByIdArgs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.crossme.GetPuzzleByIdArgs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.crossme.GetPuzzleByIdArgs}
 */
proto.crossme.GetPuzzleByIdArgs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.crossme.GetPuzzleByIdArgs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.crossme.GetPuzzleByIdArgs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.crossme.GetPuzzleByIdArgs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.crossme.GetPuzzleByIdArgs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.crossme.GetPuzzleByIdArgs.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.crossme.GetPuzzleByIdArgs.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.crossme.GetPuzzleResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.crossme.GetPuzzleResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.crossme.GetPuzzleResponse.displayName = 'proto.crossme.GetPuzzleResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.crossme.GetPuzzleResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.crossme.GetPuzzleResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.crossme.GetPuzzleResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.crossme.GetPuzzleResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    puzzle: (f = msg.getPuzzle()) && puzzle_pb.Puzzle.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.crossme.GetPuzzleResponse}
 */
proto.crossme.GetPuzzleResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.crossme.GetPuzzleResponse;
  return proto.crossme.GetPuzzleResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.crossme.GetPuzzleResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.crossme.GetPuzzleResponse}
 */
proto.crossme.GetPuzzleResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new puzzle_pb.Puzzle;
      reader.readMessage(value,puzzle_pb.Puzzle.deserializeBinaryFromReader);
      msg.setPuzzle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.crossme.GetPuzzleResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.crossme.GetPuzzleResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.crossme.GetPuzzleResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.crossme.GetPuzzleResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPuzzle();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      puzzle_pb.Puzzle.serializeBinaryToWriter
    );
  }
};


/**
 * optional Puzzle puzzle = 1;
 * @return {?proto.crossme.Puzzle}
 */
proto.crossme.GetPuzzleResponse.prototype.getPuzzle = function() {
  return /** @type{?proto.crossme.Puzzle} */ (
    jspb.Message.getWrapperField(this, puzzle_pb.Puzzle, 1));
};


/** @param {?proto.crossme.Puzzle|undefined} value */
proto.crossme.GetPuzzleResponse.prototype.setPuzzle = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.crossme.GetPuzzleResponse.prototype.clearPuzzle = function() {
  this.setPuzzle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.crossme.GetPuzzleResponse.prototype.hasPuzzle = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.crossme.NewGameArgs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.crossme.NewGameArgs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.crossme.NewGameArgs.displayName = 'proto.crossme.NewGameArgs';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.crossme.NewGameArgs.prototype.toObject = function(opt_includeInstance) {
  return proto.crossme.NewGameArgs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.crossme.NewGameArgs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.crossme.NewGameArgs.toObject = function(includeInstance, msg) {
  var f, obj = {
    puzzleId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.crossme.NewGameArgs}
 */
proto.crossme.NewGameArgs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.crossme.NewGameArgs;
  return proto.crossme.NewGameArgs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.crossme.NewGameArgs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.crossme.NewGameArgs}
 */
proto.crossme.NewGameArgs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPuzzleId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.crossme.NewGameArgs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.crossme.NewGameArgs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.crossme.NewGameArgs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.crossme.NewGameArgs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPuzzleId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string puzzle_id = 1;
 * @return {string}
 */
proto.crossme.NewGameArgs.prototype.getPuzzleId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.crossme.NewGameArgs.prototype.setPuzzleId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.crossme.NewGameResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.crossme.NewGameResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.crossme.NewGameResponse.displayName = 'proto.crossme.NewGameResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.crossme.NewGameResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.crossme.NewGameResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.crossme.NewGameResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.crossme.NewGameResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    game: (f = msg.getGame()) && game_pb.Game.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.crossme.NewGameResponse}
 */
proto.crossme.NewGameResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.crossme.NewGameResponse;
  return proto.crossme.NewGameResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.crossme.NewGameResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.crossme.NewGameResponse}
 */
proto.crossme.NewGameResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new game_pb.Game;
      reader.readMessage(value,game_pb.Game.deserializeBinaryFromReader);
      msg.setGame(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.crossme.NewGameResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.crossme.NewGameResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.crossme.NewGameResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.crossme.NewGameResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGame();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      game_pb.Game.serializeBinaryToWriter
    );
  }
};


/**
 * optional Game game = 1;
 * @return {?proto.crossme.Game}
 */
proto.crossme.NewGameResponse.prototype.getGame = function() {
  return /** @type{?proto.crossme.Game} */ (
    jspb.Message.getWrapperField(this, game_pb.Game, 1));
};


/** @param {?proto.crossme.Game|undefined} value */
proto.crossme.NewGameResponse.prototype.setGame = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.crossme.NewGameResponse.prototype.clearGame = function() {
  this.setGame(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.crossme.NewGameResponse.prototype.hasGame = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.crossme.GetGameByIdArgs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.crossme.GetGameByIdArgs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.crossme.GetGameByIdArgs.displayName = 'proto.crossme.GetGameByIdArgs';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.crossme.GetGameByIdArgs.prototype.toObject = function(opt_includeInstance) {
  return proto.crossme.GetGameByIdArgs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.crossme.GetGameByIdArgs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.crossme.GetGameByIdArgs.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.crossme.GetGameByIdArgs}
 */
proto.crossme.GetGameByIdArgs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.crossme.GetGameByIdArgs;
  return proto.crossme.GetGameByIdArgs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.crossme.GetGameByIdArgs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.crossme.GetGameByIdArgs}
 */
proto.crossme.GetGameByIdArgs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.crossme.GetGameByIdArgs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.crossme.GetGameByIdArgs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.crossme.GetGameByIdArgs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.crossme.GetGameByIdArgs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.crossme.GetGameByIdArgs.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.crossme.GetGameByIdArgs.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.crossme.GetGameResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.crossme.GetGameResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.crossme.GetGameResponse.displayName = 'proto.crossme.GetGameResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.crossme.GetGameResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.crossme.GetGameResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.crossme.GetGameResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.crossme.GetGameResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    game: (f = msg.getGame()) && game_pb.Game.toObject(includeInstance, f),
    puzzle: (f = msg.getPuzzle()) && puzzle_pb.Puzzle.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.crossme.GetGameResponse}
 */
proto.crossme.GetGameResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.crossme.GetGameResponse;
  return proto.crossme.GetGameResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.crossme.GetGameResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.crossme.GetGameResponse}
 */
proto.crossme.GetGameResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new game_pb.Game;
      reader.readMessage(value,game_pb.Game.deserializeBinaryFromReader);
      msg.setGame(value);
      break;
    case 2:
      var value = new puzzle_pb.Puzzle;
      reader.readMessage(value,puzzle_pb.Puzzle.deserializeBinaryFromReader);
      msg.setPuzzle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.crossme.GetGameResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.crossme.GetGameResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.crossme.GetGameResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.crossme.GetGameResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGame();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      game_pb.Game.serializeBinaryToWriter
    );
  }
  f = message.getPuzzle();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      puzzle_pb.Puzzle.serializeBinaryToWriter
    );
  }
};


/**
 * optional Game game = 1;
 * @return {?proto.crossme.Game}
 */
proto.crossme.GetGameResponse.prototype.getGame = function() {
  return /** @type{?proto.crossme.Game} */ (
    jspb.Message.getWrapperField(this, game_pb.Game, 1));
};


/** @param {?proto.crossme.Game|undefined} value */
proto.crossme.GetGameResponse.prototype.setGame = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.crossme.GetGameResponse.prototype.clearGame = function() {
  this.setGame(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.crossme.GetGameResponse.prototype.hasGame = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Puzzle puzzle = 2;
 * @return {?proto.crossme.Puzzle}
 */
proto.crossme.GetGameResponse.prototype.getPuzzle = function() {
  return /** @type{?proto.crossme.Puzzle} */ (
    jspb.Message.getWrapperField(this, puzzle_pb.Puzzle, 2));
};


/** @param {?proto.crossme.Puzzle|undefined} value */
proto.crossme.GetGameResponse.prototype.setPuzzle = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.crossme.GetGameResponse.prototype.clearPuzzle = function() {
  this.setPuzzle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.crossme.GetGameResponse.prototype.hasPuzzle = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.crossme.UploadPuzzleArgs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.crossme.UploadPuzzleArgs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.crossme.UploadPuzzleArgs.displayName = 'proto.crossme.UploadPuzzleArgs';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.crossme.UploadPuzzleArgs.prototype.toObject = function(opt_includeInstance) {
  return proto.crossme.UploadPuzzleArgs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.crossme.UploadPuzzleArgs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.crossme.UploadPuzzleArgs.toObject = function(includeInstance, msg) {
  var f, obj = {
    filename: jspb.Message.getFieldWithDefault(msg, 1, ""),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.crossme.UploadPuzzleArgs}
 */
proto.crossme.UploadPuzzleArgs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.crossme.UploadPuzzleArgs;
  return proto.crossme.UploadPuzzleArgs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.crossme.UploadPuzzleArgs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.crossme.UploadPuzzleArgs}
 */
proto.crossme.UploadPuzzleArgs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilename(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.crossme.UploadPuzzleArgs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.crossme.UploadPuzzleArgs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.crossme.UploadPuzzleArgs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.crossme.UploadPuzzleArgs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string filename = 1;
 * @return {string}
 */
proto.crossme.UploadPuzzleArgs.prototype.getFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.crossme.UploadPuzzleArgs.prototype.setFilename = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes data = 2;
 * @return {string}
 */
proto.crossme.UploadPuzzleArgs.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.crossme.UploadPuzzleArgs.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.crossme.UploadPuzzleArgs.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.crossme.UploadPuzzleArgs.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.crossme.UploadPuzzleResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.crossme.UploadPuzzleResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.crossme.UploadPuzzleResponse.displayName = 'proto.crossme.UploadPuzzleResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.crossme.UploadPuzzleResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.crossme.UploadPuzzleResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.crossme.UploadPuzzleResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.crossme.UploadPuzzleResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    puzzle: (f = msg.getPuzzle()) && puzzle_pb.Puzzle.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.crossme.UploadPuzzleResponse}
 */
proto.crossme.UploadPuzzleResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.crossme.UploadPuzzleResponse;
  return proto.crossme.UploadPuzzleResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.crossme.UploadPuzzleResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.crossme.UploadPuzzleResponse}
 */
proto.crossme.UploadPuzzleResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new puzzle_pb.Puzzle;
      reader.readMessage(value,puzzle_pb.Puzzle.deserializeBinaryFromReader);
      msg.setPuzzle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.crossme.UploadPuzzleResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.crossme.UploadPuzzleResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.crossme.UploadPuzzleResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.crossme.UploadPuzzleResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPuzzle();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      puzzle_pb.Puzzle.serializeBinaryToWriter
    );
  }
};


/**
 * optional Puzzle puzzle = 1;
 * @return {?proto.crossme.Puzzle}
 */
proto.crossme.UploadPuzzleResponse.prototype.getPuzzle = function() {
  return /** @type{?proto.crossme.Puzzle} */ (
    jspb.Message.getWrapperField(this, puzzle_pb.Puzzle, 1));
};


/** @param {?proto.crossme.Puzzle|undefined} value */
proto.crossme.UploadPuzzleResponse.prototype.setPuzzle = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.crossme.UploadPuzzleResponse.prototype.clearPuzzle = function() {
  this.setPuzzle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.crossme.UploadPuzzleResponse.prototype.hasPuzzle = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.crossme.SubscribeArgs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.crossme.SubscribeArgs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.crossme.SubscribeArgs.displayName = 'proto.crossme.SubscribeArgs';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.crossme.SubscribeArgs.prototype.toObject = function(opt_includeInstance) {
  return proto.crossme.SubscribeArgs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.crossme.SubscribeArgs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.crossme.SubscribeArgs.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nodeId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.crossme.SubscribeArgs}
 */
proto.crossme.SubscribeArgs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.crossme.SubscribeArgs;
  return proto.crossme.SubscribeArgs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.crossme.SubscribeArgs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.crossme.SubscribeArgs}
 */
proto.crossme.SubscribeArgs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.crossme.SubscribeArgs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.crossme.SubscribeArgs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.crossme.SubscribeArgs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.crossme.SubscribeArgs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNodeId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string game_id = 1;
 * @return {string}
 */
proto.crossme.SubscribeArgs.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.crossme.SubscribeArgs.prototype.setGameId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string node_id = 2;
 * @return {string}
 */
proto.crossme.SubscribeArgs.prototype.getNodeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.crossme.SubscribeArgs.prototype.setNodeId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.crossme.SubscribeEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.crossme.SubscribeEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.crossme.SubscribeEvent.displayName = 'proto.crossme.SubscribeEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.crossme.SubscribeEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.crossme.SubscribeEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.crossme.SubscribeEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.crossme.SubscribeEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    fill: (f = msg.getFill()) && fill_pb.Fill.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.crossme.SubscribeEvent}
 */
proto.crossme.SubscribeEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.crossme.SubscribeEvent;
  return proto.crossme.SubscribeEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.crossme.SubscribeEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.crossme.SubscribeEvent}
 */
proto.crossme.SubscribeEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new fill_pb.Fill;
      reader.readMessage(value,fill_pb.Fill.deserializeBinaryFromReader);
      msg.setFill(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.crossme.SubscribeEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.crossme.SubscribeEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.crossme.SubscribeEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.crossme.SubscribeEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFill();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      fill_pb.Fill.serializeBinaryToWriter
    );
  }
};


/**
 * optional Fill fill = 1;
 * @return {?proto.crossme.Fill}
 */
proto.crossme.SubscribeEvent.prototype.getFill = function() {
  return /** @type{?proto.crossme.Fill} */ (
    jspb.Message.getWrapperField(this, fill_pb.Fill, 1));
};


/** @param {?proto.crossme.Fill|undefined} value */
proto.crossme.SubscribeEvent.prototype.setFill = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.crossme.SubscribeEvent.prototype.clearFill = function() {
  this.setFill(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.crossme.SubscribeEvent.prototype.hasFill = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.crossme.UpdateFillArgs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.crossme.UpdateFillArgs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.crossme.UpdateFillArgs.displayName = 'proto.crossme.UpdateFillArgs';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.crossme.UpdateFillArgs.prototype.toObject = function(opt_includeInstance) {
  return proto.crossme.UpdateFillArgs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.crossme.UpdateFillArgs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.crossme.UpdateFillArgs.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nodeId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fill: (f = msg.getFill()) && fill_pb.Fill.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.crossme.UpdateFillArgs}
 */
proto.crossme.UpdateFillArgs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.crossme.UpdateFillArgs;
  return proto.crossme.UpdateFillArgs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.crossme.UpdateFillArgs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.crossme.UpdateFillArgs}
 */
proto.crossme.UpdateFillArgs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeId(value);
      break;
    case 3:
      var value = new fill_pb.Fill;
      reader.readMessage(value,fill_pb.Fill.deserializeBinaryFromReader);
      msg.setFill(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.crossme.UpdateFillArgs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.crossme.UpdateFillArgs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.crossme.UpdateFillArgs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.crossme.UpdateFillArgs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNodeId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFill();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      fill_pb.Fill.serializeBinaryToWriter
    );
  }
};


/**
 * optional string game_id = 1;
 * @return {string}
 */
proto.crossme.UpdateFillArgs.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.crossme.UpdateFillArgs.prototype.setGameId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string node_id = 2;
 * @return {string}
 */
proto.crossme.UpdateFillArgs.prototype.getNodeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.crossme.UpdateFillArgs.prototype.setNodeId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Fill fill = 3;
 * @return {?proto.crossme.Fill}
 */
proto.crossme.UpdateFillArgs.prototype.getFill = function() {
  return /** @type{?proto.crossme.Fill} */ (
    jspb.Message.getWrapperField(this, fill_pb.Fill, 3));
};


/** @param {?proto.crossme.Fill|undefined} value */
proto.crossme.UpdateFillArgs.prototype.setFill = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.crossme.UpdateFillArgs.prototype.clearFill = function() {
  this.setFill(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.crossme.UpdateFillArgs.prototype.hasFill = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.crossme.UpdateFillResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.crossme.UpdateFillResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.crossme.UpdateFillResponse.displayName = 'proto.crossme.UpdateFillResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.crossme.UpdateFillResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.crossme.UpdateFillResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.crossme.UpdateFillResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.crossme.UpdateFillResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.crossme.UpdateFillResponse}
 */
proto.crossme.UpdateFillResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.crossme.UpdateFillResponse;
  return proto.crossme.UpdateFillResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.crossme.UpdateFillResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.crossme.UpdateFillResponse}
 */
proto.crossme.UpdateFillResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.crossme.UpdateFillResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.crossme.UpdateFillResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.crossme.UpdateFillResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.crossme.UpdateFillResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.crossme);
