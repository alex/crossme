/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.exportSymbol('proto.crossme.Puzzle', null, global);
goog.exportSymbol('proto.crossme.Puzzle.Cell', null, global);
goog.exportSymbol('proto.crossme.Puzzle.Clue', null, global);
goog.exportSymbol('proto.crossme.Puzzle.Meta', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.crossme.Puzzle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.crossme.Puzzle.repeatedFields_, null);
};
goog.inherits(proto.crossme.Puzzle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.crossme.Puzzle.displayName = 'proto.crossme.Puzzle';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.crossme.Puzzle.repeatedFields_ = [8,9,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.crossme.Puzzle.prototype.toObject = function(opt_includeInstance) {
  return proto.crossme.Puzzle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.crossme.Puzzle} msg The msg instance to transform.
 * @return {!Object}
 */
proto.crossme.Puzzle.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: msg.getTitle(),
    author: msg.getAuthor(),
    copyright: msg.getCopyright(),
    note: msg.getNote(),
    width: msg.getWidth(),
    height: msg.getHeight(),
    squaresList: jspb.Message.toObjectList(msg.getSquaresList(),
    proto.crossme.Puzzle.Cell.toObject, includeInstance),
    acrossCluesList: jspb.Message.toObjectList(msg.getAcrossCluesList(),
    proto.crossme.Puzzle.Clue.toObject, includeInstance),
    downCluesList: jspb.Message.toObjectList(msg.getDownCluesList(),
    proto.crossme.Puzzle.Clue.toObject, includeInstance),
    metadata: (f = msg.getMetadata()) && proto.crossme.Puzzle.Meta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.crossme.Puzzle} The clone.
 */
proto.crossme.Puzzle.prototype.cloneMessage = function() {
  return /** @type {!proto.crossme.Puzzle} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.crossme.Puzzle.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.crossme.Puzzle.prototype.setTitle = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string author = 2;
 * @return {string}
 */
proto.crossme.Puzzle.prototype.getAuthor = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.crossme.Puzzle.prototype.setAuthor = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string copyright = 3;
 * @return {string}
 */
proto.crossme.Puzzle.prototype.getCopyright = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.crossme.Puzzle.prototype.setCopyright = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string note = 4;
 * @return {string}
 */
proto.crossme.Puzzle.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.crossme.Puzzle.prototype.setNote = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 width = 5;
 * @return {number}
 */
proto.crossme.Puzzle.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.crossme.Puzzle.prototype.setWidth = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int32 height = 6;
 * @return {number}
 */
proto.crossme.Puzzle.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.crossme.Puzzle.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * repeated Cell squares = 8;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.crossme.Puzzle.Cell>}
 */
proto.crossme.Puzzle.prototype.getSquaresList = function() {
  return /** @type{!Array.<!proto.crossme.Puzzle.Cell>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.crossme.Puzzle.Cell, 8));
};


/** @param {Array.<!proto.crossme.Puzzle.Cell>} value  */
proto.crossme.Puzzle.prototype.setSquaresList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


proto.crossme.Puzzle.prototype.clearSquaresList = function() {
  this.setSquaresList([]);
};


/**
 * repeated Clue across_clues = 9;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.crossme.Puzzle.Clue>}
 */
proto.crossme.Puzzle.prototype.getAcrossCluesList = function() {
  return /** @type{!Array.<!proto.crossme.Puzzle.Clue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.crossme.Puzzle.Clue, 9));
};


/** @param {Array.<!proto.crossme.Puzzle.Clue>} value  */
proto.crossme.Puzzle.prototype.setAcrossCluesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 9, value);
};


proto.crossme.Puzzle.prototype.clearAcrossCluesList = function() {
  this.setAcrossCluesList([]);
};


/**
 * repeated Clue down_clues = 10;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.crossme.Puzzle.Clue>}
 */
proto.crossme.Puzzle.prototype.getDownCluesList = function() {
  return /** @type{!Array.<!proto.crossme.Puzzle.Clue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.crossme.Puzzle.Clue, 10));
};


/** @param {Array.<!proto.crossme.Puzzle.Clue>} value  */
proto.crossme.Puzzle.prototype.setDownCluesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


proto.crossme.Puzzle.prototype.clearDownCluesList = function() {
  this.setDownCluesList([]);
};


/**
 * optional Meta metadata = 11;
 * @return {proto.crossme.Puzzle.Meta}
 */
proto.crossme.Puzzle.prototype.getMetadata = function() {
  return /** @type{proto.crossme.Puzzle.Meta} */ (
    jspb.Message.getWrapperField(this, proto.crossme.Puzzle.Meta, 11));
};


/** @param {proto.crossme.Puzzle.Meta|undefined} value  */
proto.crossme.Puzzle.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.crossme.Puzzle.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.crossme.Puzzle.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.crossme.Puzzle.Cell = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.crossme.Puzzle.Cell, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.crossme.Puzzle.Cell.displayName = 'proto.crossme.Puzzle.Cell';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.crossme.Puzzle.Cell.prototype.toObject = function(opt_includeInstance) {
  return proto.crossme.Puzzle.Cell.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.crossme.Puzzle.Cell} msg The msg instance to transform.
 * @return {!Object}
 */
proto.crossme.Puzzle.Cell.toObject = function(includeInstance, msg) {
  var f, obj = {
    number: msg.getNumber(),
    black: msg.getBlack(),
    circled: msg.getCircled(),
    fill: msg.getFill(),
    clueAcross: msg.getClueAcross(),
    clueDown: msg.getClueDown()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.crossme.Puzzle.Cell} The clone.
 */
proto.crossme.Puzzle.Cell.prototype.cloneMessage = function() {
  return /** @type {!proto.crossme.Puzzle.Cell} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int32 number = 1;
 * @return {number}
 */
proto.crossme.Puzzle.Cell.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.crossme.Puzzle.Cell.prototype.setNumber = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool black = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.crossme.Puzzle.Cell.prototype.getBlack = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 2, false));
};


/** @param {boolean} value  */
proto.crossme.Puzzle.Cell.prototype.setBlack = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bool circled = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.crossme.Puzzle.Cell.prototype.getCircled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 3, false));
};


/** @param {boolean} value  */
proto.crossme.Puzzle.Cell.prototype.setCircled = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string fill = 4;
 * @return {string}
 */
proto.crossme.Puzzle.Cell.prototype.getFill = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.crossme.Puzzle.Cell.prototype.setFill = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 clue_across = 5;
 * @return {number}
 */
proto.crossme.Puzzle.Cell.prototype.getClueAcross = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.crossme.Puzzle.Cell.prototype.setClueAcross = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int32 clue_down = 6;
 * @return {number}
 */
proto.crossme.Puzzle.Cell.prototype.getClueDown = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.crossme.Puzzle.Cell.prototype.setClueDown = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.crossme.Puzzle.Clue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.crossme.Puzzle.Clue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.crossme.Puzzle.Clue.displayName = 'proto.crossme.Puzzle.Clue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.crossme.Puzzle.Clue.prototype.toObject = function(opt_includeInstance) {
  return proto.crossme.Puzzle.Clue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.crossme.Puzzle.Clue} msg The msg instance to transform.
 * @return {!Object}
 */
proto.crossme.Puzzle.Clue.toObject = function(includeInstance, msg) {
  var f, obj = {
    number: msg.getNumber(),
    text: msg.getText()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.crossme.Puzzle.Clue} The clone.
 */
proto.crossme.Puzzle.Clue.prototype.cloneMessage = function() {
  return /** @type {!proto.crossme.Puzzle.Clue} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int32 number = 1;
 * @return {number}
 */
proto.crossme.Puzzle.Clue.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.crossme.Puzzle.Clue.prototype.setNumber = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string text = 3;
 * @return {string}
 */
proto.crossme.Puzzle.Clue.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.crossme.Puzzle.Clue.prototype.setText = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.crossme.Puzzle.Meta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.crossme.Puzzle.Meta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.crossme.Puzzle.Meta.displayName = 'proto.crossme.Puzzle.Meta';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.crossme.Puzzle.Meta.prototype.toObject = function(opt_includeInstance) {
  return proto.crossme.Puzzle.Meta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.crossme.Puzzle.Meta} msg The msg instance to transform.
 * @return {!Object}
 */
proto.crossme.Puzzle.Meta.toObject = function(includeInstance, msg) {
  var f, obj = {
    created: (f = msg.getCreated()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    sha256: msg.getSha256(),
    date: msg.getDate()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.crossme.Puzzle.Meta} The clone.
 */
proto.crossme.Puzzle.Meta.prototype.cloneMessage = function() {
  return /** @type {!proto.crossme.Puzzle.Meta} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional google.protobuf.Timestamp created = 1;
 * @return {proto.google.protobuf.Timestamp}
 */
proto.crossme.Puzzle.Meta.prototype.getCreated = function() {
  return /** @type{proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/** @param {proto.google.protobuf.Timestamp|undefined} value  */
proto.crossme.Puzzle.Meta.prototype.setCreated = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.crossme.Puzzle.Meta.prototype.clearCreated = function() {
  this.setCreated(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.crossme.Puzzle.Meta.prototype.hasCreated = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string sha256 = 2;
 * @return {string}
 */
proto.crossme.Puzzle.Meta.prototype.getSha256 = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.crossme.Puzzle.Meta.prototype.setSha256 = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string date = 3;
 * @return {string}
 */
proto.crossme.Puzzle.Meta.prototype.getDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.crossme.Puzzle.Meta.prototype.setDate = function(value) {
  jspb.Message.setField(this, 3, value);
};


goog.object.extend(exports, proto.crossme);
