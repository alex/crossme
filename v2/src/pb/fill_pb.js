/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.crossme.Fill', null, global);
goog.exportSymbol('proto.crossme.Fill.Cell', null, global);
goog.exportSymbol('proto.crossme.Fill.Flags', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.crossme.Fill = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.crossme.Fill.repeatedFields_, null);
};
goog.inherits(proto.crossme.Fill, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.crossme.Fill.displayName = 'proto.crossme.Fill';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.crossme.Fill.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.crossme.Fill.prototype.toObject = function(opt_includeInstance) {
  return proto.crossme.Fill.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.crossme.Fill} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.crossme.Fill.toObject = function(includeInstance, msg) {
  var f, obj = {
    puzzleId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    complete: jspb.Message.getFieldWithDefault(msg, 2, false),
    clock: jspb.Message.getFieldWithDefault(msg, 3, 0),
    cellsList: jspb.Message.toObjectList(msg.getCellsList(),
    proto.crossme.Fill.Cell.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.crossme.Fill}
 */
proto.crossme.Fill.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.crossme.Fill;
  return proto.crossme.Fill.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.crossme.Fill} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.crossme.Fill}
 */
proto.crossme.Fill.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPuzzleId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setComplete(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setClock(value);
      break;
    case 4:
      var value = new proto.crossme.Fill.Cell;
      reader.readMessage(value,proto.crossme.Fill.Cell.deserializeBinaryFromReader);
      msg.addCells(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.crossme.Fill.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.crossme.Fill.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.crossme.Fill} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.crossme.Fill.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPuzzleId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getComplete();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getClock();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getCellsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.crossme.Fill.Cell.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.crossme.Fill.Flags = {
  NONE: 0,
  CHECKED_RIGHT: 1,
  CHECKED_WRONG: 2,
  PENCIL: 4,
  DID_CHECK: 8,
  DID_REVEAL: 16
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.crossme.Fill.Cell = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.crossme.Fill.Cell, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.crossme.Fill.Cell.displayName = 'proto.crossme.Fill.Cell';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.crossme.Fill.Cell.prototype.toObject = function(opt_includeInstance) {
  return proto.crossme.Fill.Cell.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.crossme.Fill.Cell} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.crossme.Fill.Cell.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clock: jspb.Message.getFieldWithDefault(msg, 2, 0),
    owner: jspb.Message.getFieldWithDefault(msg, 3, ""),
    fill: jspb.Message.getFieldWithDefault(msg, 4, ""),
    flags: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.crossme.Fill.Cell}
 */
proto.crossme.Fill.Cell.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.crossme.Fill.Cell;
  return proto.crossme.Fill.Cell.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.crossme.Fill.Cell} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.crossme.Fill.Cell}
 */
proto.crossme.Fill.Cell.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIndex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setClock(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwner(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFill(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.crossme.Fill.Cell.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.crossme.Fill.Cell.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.crossme.Fill.Cell} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.crossme.Fill.Cell.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getClock();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getOwner();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFill();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getFlags();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional int32 index = 1;
 * @return {number}
 */
proto.crossme.Fill.Cell.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.crossme.Fill.Cell.prototype.setIndex = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 clock = 2;
 * @return {number}
 */
proto.crossme.Fill.Cell.prototype.getClock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.crossme.Fill.Cell.prototype.setClock = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string owner = 3;
 * @return {string}
 */
proto.crossme.Fill.Cell.prototype.getOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.crossme.Fill.Cell.prototype.setOwner = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string fill = 4;
 * @return {string}
 */
proto.crossme.Fill.Cell.prototype.getFill = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.crossme.Fill.Cell.prototype.setFill = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint32 flags = 5;
 * @return {number}
 */
proto.crossme.Fill.Cell.prototype.getFlags = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.crossme.Fill.Cell.prototype.setFlags = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string puzzle_id = 1;
 * @return {string}
 */
proto.crossme.Fill.prototype.getPuzzleId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.crossme.Fill.prototype.setPuzzleId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool complete = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.crossme.Fill.prototype.getComplete = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.crossme.Fill.prototype.setComplete = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional int64 clock = 3;
 * @return {number}
 */
proto.crossme.Fill.prototype.getClock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.crossme.Fill.prototype.setClock = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated Cell cells = 4;
 * @return {!Array<!proto.crossme.Fill.Cell>}
 */
proto.crossme.Fill.prototype.getCellsList = function() {
  return /** @type{!Array<!proto.crossme.Fill.Cell>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.crossme.Fill.Cell, 4));
};


/** @param {!Array<!proto.crossme.Fill.Cell>} value */
proto.crossme.Fill.prototype.setCellsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.crossme.Fill.Cell=} opt_value
 * @param {number=} opt_index
 * @return {!proto.crossme.Fill.Cell}
 */
proto.crossme.Fill.prototype.addCells = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.crossme.Fill.Cell, opt_index);
};


proto.crossme.Fill.prototype.clearCellsList = function() {
  this.setCellsList([]);
};


goog.object.extend(exports, proto.crossme);
